
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true })

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/library.js')

const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: '6.7.0',
  engine: '3cff47a7f5d65c3ea74883f1d736e41d68ce91ed',
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
}

const path = require('path')

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable',
})

exports.Prisma.ReplicantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  snapshot: 'snapshot',
}

exports.Prisma.InterviewScalarFieldEnum = {
  id: 'id',
  replicantId: 'replicantId',
  createdAt: 'createdAt',
  summary: 'summary',
}

exports.Prisma.InterviewTopicScalarFieldEnum = {
  id: 'id',
  interviewId: 'interviewId',
  name: 'name',
  summary: 'summary',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  questionText: 'questionText',
  answerText: 'answerText',
  emotion: 'emotion',
  createdAt: 'createdAt',
}

exports.Prisma.UserCardScalarFieldEnum = {
  id: 'id',
  replicantId: 'replicantId',
  name: 'name',
  role: 'role',
  description: 'description',
  snapshot: 'snapshot',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  replicantId: 'replicantId',
  userCardId: 'userCardId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  authorIsReplicant: 'authorIsReplicant',
  content: 'content',
  createdAt: 'createdAt',
}

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
}

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
}

exports.Prisma.ModelName = {
  Replicant: 'Replicant',
  Interview: 'Interview',
  InterviewTopic: 'InterviewTopic',
  Question: 'Question',
  UserCard: 'UserCard',
  Chat: 'Chat',
  Message: 'Message',
}
/**
 * Create the Client
 */
const config = {
  'generator': {
    'name': 'client',
    'provider': {
      'fromEnvVar': null,
      'value': 'prisma-client-js',
    },
    'output': {
      'value': '/home/devi/Develop/replicant/packages/backend/src/prisma/client',
      'fromEnvVar': null,
    },
    'config': {
      'engineType': 'library',
    },
    'binaryTargets': [
      {
        'fromEnvVar': null,
        'value': 'debian-openssl-3.0.x',
        'native': true,
      },
    ],
    'previewFeatures': [],
    'sourceFilePath': '/home/devi/Develop/replicant/packages/backend/src/prisma/schema.prisma',
    'isCustomOutput': true,
  },
  'relativeEnvPaths': {
    'rootEnvPath': '../../../../../.env',
  },
  'relativePath': '..',
  'clientVersion': '6.7.0',
  'engineVersion': '3cff47a7f5d65c3ea74883f1d736e41d68ce91ed',
  'datasourceNames': [
    'db',
  ],
  'activeProvider': 'sqlite',
  'inlineDatasources': {
    'db': {
      'url': {
        'fromEnvVar': null,
        'value': 'file:./db.sqlite',
      },
    },
  },
  'inlineSchema': 'generator client {\n  provider = "prisma-client-js"\n  output   = "./client"\n}\n\ndatasource db {\n  provider = "sqlite"\n  url      = "file:./db.sqlite"\n}\n\n/// Represents a digital replica entity.\n/// Stores basic metadata, snapshot data, related interview, user cards, and chats.\nmodel Replicant {\n  id          Int        @id @default(autoincrement())\n  name        String\n  description String?\n  createdAt   DateTime   @default(now())\n  snapshot    String\n  chats       Chat[]     @relation("ReplicantChats")\n  interview   Interview? @relation("ReplicantInterview")\n  userCards   UserCard[]\n}\n\n/// Represents an interview associated with a replicant.\n/// Contains summary and a set of interview topics.\nmodel Interview {\n  id          Int              @id @default(autoincrement())\n  replicantId Int              @unique\n  createdAt   DateTime         @default(now())\n  summary     String\n  replicant   Replicant        @relation("ReplicantInterview", fields: [replicantId], references: [id], onDelete: Cascade)\n  topics      InterviewTopic[]\n}\n\n/// Represents a topic within an interview.\n/// Contains questions, summary, and metadata about the topic.\nmodel InterviewTopic {\n  id          Int        @id @default(autoincrement())\n  interviewId Int\n  name        String\n  summary     String\n  type        String?\n  createdAt   DateTime   @default(now())\n  updatedAt   DateTime   @default(now())\n  interview   Interview  @relation(fields: [interviewId], references: [id], onDelete: Cascade)\n  questions   Question[]\n}\n\n/// Represents a question within an interview topic.\n/// Stores question text, optional answer, associated emotion, and timestamp.\nmodel Question {\n  id           Int            @id @default(autoincrement())\n  topicId      Int\n  questionText String\n  answerText   String?\n  emotion      String\n  createdAt    DateTime       @default(now())\n  topic        InterviewTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)\n}\n\n/// Represents a user card related to a replicant.\n/// Contains information about a person (e.g., role, description) and their chats.\nmodel UserCard {\n  id          Int       @id @default(autoincrement())\n  replicantId Int\n  name        String\n  role        String?\n  description String?\n  snapshot    String\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  chats       Chat[]    @relation("UserCardChats")\n  replicant   Replicant @relation(fields: [replicantId], references: [id], onDelete: Cascade)\n}\n\n/// Represents a chat/conversation.\n/// Links to a replicant and optionally to a user card, contains messages.\nmodel Chat {\n  id          Int       @id @default(autoincrement())\n  replicantId Int\n  userCardId  Int?\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  userCard    UserCard? @relation("UserCardChats", fields: [userCardId], references: [id])\n  replicant   Replicant @relation("ReplicantChats", fields: [replicantId], references: [id], onDelete: Cascade)\n  messages    Message[]\n}\n\n/// Represents a single message within a chat.\n/// Indicates whether author is replicant or not, with content and timestamp.\nmodel Message {\n  id                Int      @id @default(autoincrement())\n  chatId            Int\n  authorIsReplicant Boolean\n  content           String\n  createdAt         DateTime @default(now())\n  chat              Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)\n}\n',
  'inlineSchemaHash': '9480a899b5bf469afb0730f9880e96013e636690554edff3c73bae1e8abade31',
  'copyEngine': true,
}

const fs = require('fs')

config.dirname = __dirname
if (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {
  const alternativePaths = [
    'src/prisma/client',
    'prisma/client',
  ]

  const alternativePath = alternativePaths.find((altPath) => {
    return fs.existsSync(path.join(process.cwd(), altPath, 'schema.prisma'))
  }) ?? alternativePaths[0]

  config.dirname = path.join(process.cwd(), alternativePath)
  config.isBundled = true
}

config.runtimeDataModel = JSON.parse('{"models":{"Replicant":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","nativeType":null,"default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"description","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"snapshot","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"chats","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Chat","nativeType":null,"relationName":"ReplicantChats","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"interview","kind":"object","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Interview","nativeType":null,"relationName":"ReplicantInterview","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"userCards","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"UserCard","nativeType":null,"relationName":"ReplicantToUserCard","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false,"documentation":"Represents a digital replica entity.\\\\nStores basic metadata, snapshot data, related interview, user cards, and chats."},"Interview":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","nativeType":null,"default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"replicantId","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"summary","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"replicant","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Replicant","nativeType":null,"relationName":"ReplicantInterview","relationFromFields":["replicantId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"topics","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"InterviewTopic","nativeType":null,"relationName":"InterviewToInterviewTopic","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false,"documentation":"Represents an interview associated with a replicant.\\\\nContains summary and a set of interview topics."},"InterviewTopic":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","nativeType":null,"default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"interviewId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"summary","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"type","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"interview","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Interview","nativeType":null,"relationName":"InterviewToInterviewTopic","relationFromFields":["interviewId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"questions","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Question","nativeType":null,"relationName":"InterviewTopicToQuestion","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false,"documentation":"Represents a topic within an interview.\\\\nContains questions, summary, and metadata about the topic."},"Question":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","nativeType":null,"default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"topicId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"questionText","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"answerText","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"emotion","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"topic","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"InterviewTopic","nativeType":null,"relationName":"InterviewTopicToQuestion","relationFromFields":["topicId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false,"documentation":"Represents a question within an interview topic.\\\\nStores question text, optional answer, associated emotion, and timestamp."},"UserCard":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","nativeType":null,"default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"replicantId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"role","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"description","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"snapshot","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true},{"name":"chats","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Chat","nativeType":null,"relationName":"UserCardChats","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"replicant","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Replicant","nativeType":null,"relationName":"ReplicantToUserCard","relationFromFields":["replicantId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false,"documentation":"Represents a user card related to a replicant.\\\\nContains information about a person (e.g., role, description) and their chats."},"Chat":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","nativeType":null,"default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"replicantId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"userCardId","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true},{"name":"userCard","kind":"object","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"UserCard","nativeType":null,"relationName":"UserCardChats","relationFromFields":["userCardId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"replicant","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Replicant","nativeType":null,"relationName":"ReplicantChats","relationFromFields":["replicantId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"messages","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Message","nativeType":null,"relationName":"ChatToMessage","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false,"documentation":"Represents a chat/conversation.\\\\nLinks to a replicant and optionally to a user card, contains messages."},"Message":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","nativeType":null,"default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"chatId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"authorIsReplicant","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Boolean","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"content","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"chat","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Chat","nativeType":null,"relationName":"ChatToMessage","relationFromFields":["chatId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false,"documentation":"Represents a single message within a chat.\\\\nIndicates whether author is replicant or not, with content and timestamp."}},"enums":{},"types":{}}')
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = undefined

const { warnEnvConflicts } = require('./runtime/library.js')

warnEnvConflicts({
  rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),
  schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath),
})

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

// file annotations for bundling tools to include these files
path.join(__dirname, 'libquery_engine-debian-openssl-3.0.x.so.node')
path.join(process.cwd(), 'src/prisma/client/libquery_engine-debian-openssl-3.0.x.so.node')
// file annotations for bundling tools to include these files
path.join(__dirname, 'schema.prisma')
path.join(process.cwd(), 'src/prisma/client/schema.prisma')