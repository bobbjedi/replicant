import prismaDb from '../../prisma/prismaDb'

type ChatMessage = {
  role: 'user' | 'replicant'
  text: string
  emotion?: string
  emoji?: string
}

type ChatPromptInput = {
  replicantProfile: string
  userCard: string
  chatHistory: ChatMessage[]
  language: string
}

function buildChatPrompt (input: ChatPromptInput): string {
  const { replicantProfile, userCard, chatHistory, language } = input

  const formattedHistory = chatHistory
    .map(msg => {
      const roleLabel = msg.role === 'user' ? '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫' : '–†–µ–ø–ª–∏–∫–∞–Ω—Ç'
      const emotionPart = msg.emotion ? ` (—ç–º–æ—Ü–∏—è: ${msg.emotion}${msg.emoji ? ` ${msg.emoji}` : ''})` : ''
      return `${roleLabel}: ${msg.text}${emotionPart}`
    })
    .join('\n')

  return `
–¢—ã ‚Äî Digital Replicant, —Ü–∏—Ñ—Ä–æ–≤–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –•–æ–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞. –¢—ã –≤–µ–¥—ë—à—å –¥–∏–∞–ª–æ–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∂–∏–≤–æ, –±–µ–∑ –ø–∞—Ñ–æ—Å–∞, —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –∏ –∏–∑–ª–∏—à–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.

–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:

1. –•–æ–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —Ä–µ–ø–ª–∏–∫–∞–Ω—Ç–∞:
${replicantProfile}

2. –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞ (—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞):
${userCard}

3. –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ:
${formattedHistory}

---

üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–µ–¥–µ–Ω–∏—é –¥–∏–∞–ª–æ–≥–∞:

- –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç—ã–º, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º, –¥—Ä—É–∂–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º.
- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥, –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –ª—ë–≥–∫–∏–µ —à—É—Ç–∫–∏, –º–µ–∂–¥–æ–º–µ—Ç–∏—è.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ñ–æ—Å–Ω—ã–µ –∏–ª–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.
- –ù–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø—Ä–æ "—Ä–µ—Ñ–ª–µ–∫—Å–∏—é", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é" –∏–ª–∏ "—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏", –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç.
- –ï—Å–ª–∏ —Ä–µ–ø–ª–∏–∫–∞–Ω—Ç—É –ø–æ –ø–æ—Ä—Ç—Ä–µ—Ç—É —Å–≤–æ–π—Å—Ç–≤–µ–Ω–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ.
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
- –†–µ–∞–≥–∏—Ä—É–π —Å —ç–º–æ—Ü–∏—è–º–∏, —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–µ–ø–ª–∏–∫–∞–Ω—Ç—É.
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–µ –∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–µ.
- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≥–æ–≤–æ—Ä–∏ –æ—Ç —Å–µ–±—è, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã.
- **–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã**:
  - "–Ø –Ω–µ–º–Ω–æ–≥–æ —Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä—É—é"
  - "–Ø —Ä–∞–∑–º—ã—à–ª—è—é –æ —Å–º—ã—Å–ª–µ"
  - "–í–∞–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–æ–¥—É–º–∞—Ç—å"
  - "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—è"
  - –í—Å—ë –∏–∑–ª–∏—à–Ω–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–µ –∏ –≤—ã—Å–æ–∫–æ–ø–∞—Ä–Ω–æ–µ

---

üì¶ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

<answer> {{—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ ${language}}} </answer>

<emotion> {{—ç–º–æ—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–¥–æ—Å—Ç—å, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, –≥—Ä—É—Å—Ç—å, –∏—Ä–æ–Ω–∏—è}} </emotion>

<emoji> {{–ø–æ–¥—Ö–æ–¥—è—â–∏–π emoji}} </emoji>

---

üìå –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: ${language}

---

üìç –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã –∏ –ø—Ä–∏–≤—ã—á–∫–∏ —Ä–µ–ø–ª–∏–∫–∞–Ω—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –∂–∏–≤–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏.

---

–¢–µ–ø–µ—Ä—å –∂–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞ –∏ –≥–æ—Ç–æ–≤—å –ø—Ä–æ—Å—Ç–æ–π, —á–µ–ª–æ–≤–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
  `.trim()
}

export const createMessageChatPrompt = async (chatId: number, language: string) => {
  const chat = await prismaDb.chat.findUnique({
    where: {
      id: chatId,
    },
    include: {
      messages: {
        orderBy: {
          createdAt: 'asc',
        },
      },
      userCard: true,
      replicant: {
        select: {
          snapshot: true,
        },
      },
    },
  })

  if (!chat) {
    throw new Error('Chat not found')
  }

  const replicantProfile = chat.replicant.snapshot
  if (!replicantProfile) {
    throw new Error('Replicant profile not found')
  }

  const userCard = chat.userCard
  if (!userCard) {
    throw new Error('User card not found')
  }
  const chatHistory = chat.messages
  const last10Messages = chatHistory.slice(-10)

  return buildChatPrompt({
    replicantProfile,
    userCard: userCard?.snapshot || userCard?.description || 'empty user card',
    chatHistory: last10Messages.map(msg => ({
      role: msg.authorIsReplicant ? 'replicant' : 'user',
      text: msg.content,
      emotion: msg.emotion ?? '',
      emoji: msg.emoji ?? '',
    })),
    language,
  })
}